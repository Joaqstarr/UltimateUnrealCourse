// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Characters/BaseCharacter.h"
#include "Characters/CharacterTypes.h"
#include "Enemy.generated.h"

class UPawnSensingComponent;
class UHealthBarComponent;
class AAIController;
class AWeapon;

UCLASS()
class ULTIMATECOURSE_API AEnemy : public ABaseCharacter
{
	GENERATED_BODY()

public:
	// Sets default values for this character's properties
	AEnemy();
	// Called every frame
	virtual void Tick(float DeltaTime) override;

	// Called to bind functionality to input
	virtual void SetupPlayerInputComponent(class UInputComponent* PlayerInputComponent) override;

	virtual void GetHit_Implementation(const FVector& ImpactPoint) override;

	virtual float TakeDamage(float DamageAmount, struct FDamageEvent const& DamageEvent, class AController* EventInstigator, AActor* DamageCauser) override;
	virtual void Destroyed() override;
protected:
	// Called when the game starts or when spawned
	virtual void BeginPlay() override;
	virtual void Die() override;
	UPROPERTY(BlueprintReadOnly)
	EDeathPose DeathPose = EDeathPose::EDP_Alive;
	virtual void Attack() override;
	virtual void PlayAttackMontage() override;
private:

	UPROPERTY(VisibleAnywhere)
	TObjectPtr<UHealthBarComponent> HealthBarComponent;


	TObjectPtr<APawn> CombatTarget;
	UPROPERTY(EditDefaultsOnly, Category=Combat)
	float CombatRadius = 1000;
	UPROPERTY(EditDefaultsOnly, Category=Combat)
	float AttackRadius = 150;
	void CheckCombatTarget();

	bool InTargetRange(const AActor* Target, const float Radius) const;

	UPROPERTY(EditAnywhere)
	TSubclassOf<AWeapon> WeaponClass;
	
	/*
	 *Navigation
	 */
	
	UPROPERTY(EditInstanceOnly, Category="AI Navigation")
	TObjectPtr<AActor> CurrentPatrolTarget;
	UPROPERTY(EditInstanceOnly, Category="AI Navigation")
	TArray<AActor*> PatrolTargets;
	TObjectPtr<AAIController> AiController;
	UPROPERTY(EditDefaultsOnly, Category="AI Navigation")
	float AcceptableNavPointDistance = 15.f;

	int PointPosition = 0;
	void UpdatePatrolPoints();
	void MoveToTarget(TObjectPtr<AActor> Target) const;

	UPROPERTY(EditAnywhere, Category="AI Navigation")
	float PatrolWaitTime = 3.f;
	FTimerHandle PatrolTimer;
	void PatrolTimerFinished() const;

	/*
	 * Ai Aggro
	 */
	UPROPERTY(VisibleAnywhere)
	TObjectPtr<UPawnSensingComponent> PawnSensingComponent;
	UFUNCTION()
	void OnPawnSpotted( APawn* Pawn);
	
	EEnemyState EnemyState = EEnemyState::EES_Patrolling;
};
